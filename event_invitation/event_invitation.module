<?php

/**
 * @file
 * Event invitation logic.
 */

define('EVENT_INVITATION_BATCH_SIZE', 10);

/**
 * Implements hook_menu().
 */
function event_invitation_menu() {
  $items = array();
  // Main configuration page of the event invitation module.
  $items['admin/config/event_invitation'] = array(
    'title' => 'Event invitation settings',
    'description' => 'Define content type and fields to send event invitations',
    'file' => 'event_invitation.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('event_invitation_admin_settings'),
    'access arguments' => array('administer event invitation settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission() for event_invitation.
 */
function event_invitation_permission() {
  $perms = [];
  $perms['administer event invitation settings'] = [
    'title' => t('Administer event invitation settings'),
    'description' => t('Define content type and fields to send invitations.'),
  ];
  return $perms;
}

/**
 * Implements hook_node_insert() for event_invitation.
 *
 * Send invitation when new event saved.
 */
function event_invitation_node_insert($node) {
  $event_type = variable_get('event_invitation_content_type', '');
  if ($event_type) {
    if ($node->type == $event_type && $node->status) {
      if (isset($node->field_send_invitation[LANGUAGE_NONE][0]['value']) &&
      $node->field_send_invitation[LANGUAGE_NONE][0]['value']) {
        event_invitation_send_event_invitation($node);
      }
    }
  }
}

/**
 * Implements hook_node_update() for event_invitation.
 *
 * Send invitation when event published or date event has been changed.
 */
function event_invitation_node_update($node) {
  $event_type = variable_get('event_invitation_content_type', '');
  if ($event_type) {
    if ($node->type == $event_type && $node->status) {
      if (isset($node->field_send_invitation[LANGUAGE_NONE][0]['value']) &&
      $node->field_send_invitation[LANGUAGE_NONE][0]['value']) {
        $field_date = variable_get('event_invitation_date_field', '');
        if ($field_date) {
          $current_date = isset($node->{$field_date}[LANGUAGE_NONE][0]) ? $node->{$field_date}[LANGUAGE_NONE][0] : '';
          $original_date = isset($node->original->{$field_date}[LANGUAGE_NONE][0]) ? $node->original->{$field_date}[LANGUAGE_NONE][0] : '';
          // Check if status changed to publish or date field has change.
          if (!$node->original->status || ($current_date && (!$original_date || $current_date['value'] != $original_date['value'] ||
          $current_date['value2'] != $original_date['value2']))) {
            event_invitation_send_event_invitation($node);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function event_invitation_node_delete($node) {
  $event_type = variable_get('invitation_content_type', '');
  if ($event_type) {
    if ($node->type == $event_type) {
      if (isset($node->field_send_invitation[LANGUAGE_NONE][0]['value']) &&
        $node->field_send_invitation[LANGUAGE_NONE][0]['value']) {
        // Save original node title.
        $title = $node->title;
        $node->title = t('Canceled:') . ' ' . $node->title;
        event_invitation_send_event_invitation($node,
        ['status' => 'CANCELLED', 'method' => 'CANCEL']);
        $node->title = $title;
      }
    }
  }
}

/**
 * Get 'from' string to mail header.
 *
 * @return string
 *   group name of event or site name if not group content
 */
function event_invitation_get_from_name($event, $gid = '') {
  if ($gid) {
    $result = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('nid', $gid, '=')
      ->execute()
      ->fetchField();
    return $result;
  }
  return variable_get('site_name');
}

/**
 * Send event invitation by the event fields.
 */
function event_invitation_send_event_invitation($event, $params = []) {
  global $base_url;
  $params = array_merge([
    'description' => '',
    'location' => '',
    'endTime' => '',
    'status' => 'NEEDS-ACTION',
    'method' => 'REQUEST',
  ], $params);
  // Get the names of required event fields
  // as defined on settings page.
  $field_date = variable_get('event_invitation_date_field', '');

  // Check if event is og group.
  $gid = event_invitation_event_is_og_group_content($event);
  $params['from_name'] = event_invitation_get_from_name($event, $gid);
  $params['from_address'] = variable_get('site_mail', ini_get('sendmail_from'));
  $params['startTime'] = $event->{$field_date}[LANGUAGE_NONE][0]['value'];
  if (isset($event->{$field_date}[LANGUAGE_NONE][0]['value2'])) {
    $params['endTime'] = $event->{$field_date}[LANGUAGE_NONE][0]['value2'];
  }
  $params['subject'] = $event->title;

  $field_description = variable_get('event_invitation_desc_field', '');
  if (isset($event->{$field_description}[LANGUAGE_NONE][0]['value'])) {
    $params['description'] = strip_tags($event->{$field_description}[LANGUAGE_NONE][0]['value'], '<p><a><br>');
  }
  $params['description'] .= '<br>' . l(t('Registration'), $base_url . '/node/' . $event->nid);

  $field_location = variable_get('event_invitation_location_field', '');
  if (isset($event->{$field_location}[LANGUAGE_NONE][0])) {
    $location = field_view_value('node', $event, 'field_address', $event->{$field_location}[LANGUAGE_NONE][0]);
    $params['location'] = preg_replace('#<[^>]+>#', ' ', render($location));
  }
  $params['uid'] = $event->nid;
  $to = $params['to_address'] = event_invitation_get_mails_to(explode(',', $params['from_address']), $gid);
  if (!empty($to)) {
    drupal_mail('event_invitation', 'invitation', $to, language_default(), $params);
  }
}

/**
 * Check if event is og group content.
 */
function event_invitation_event_is_og_group_content($event) {
  if (module_exists('og')) {
    // Get og field name from the event.
    $og_fields = og_get_group_audience_fields('node', $event->type);
    // Use always with the first field.
    if (count($og_fields) > 0) {
      $og_fields = array_keys($og_fields);
      $og_ref = array_pop($og_fields);
      if (isset($event->{$og_ref}[LANGUAGE_NONE][0]['target_id'])) {
        return $event->{$og_ref}[LANGUAGE_NONE][0]['target_id'];
      }
    }
  }
  return FALSE;
}

/**
 * Get mails of group or site users.
 *
 * @param string $organizer_mail
 *   Event organizer mail.
 */
function event_invitation_get_mails_to($organizer_mail, $gid = '') {
  if ($gid) {
    $users = event_invitation_members_mail_query($gid, $organizer_mail);
  }
  else {
    $users = event_invitation_site_users_mail_query($organizer_mail);
  }
  return implode(',', $users);
}

/**
 * Sql query to get all mails of site users.
 *
 * @param string $organizer_mail
 *   The mail of organizer, to remove him from the mails list.
 *   (don't send invitation to him)
 *
 * @return string
 *   All users mails.
 */
function event_invitation_site_users_mail_query($organizer_mail = '') {
  $query = db_select('users', 'u');
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'mail'));
  if ($organizer_mail) {
    $query->condition('u.mail', $organizer_mail, 'NOT IN');
  }
  return $query->execute()->fetchAllKeyed();
}

/**
 * Sql query to get all mails of specific group's users.
 *
 * @param int $gid
 *   Required group id.
 * @param string $organizer_mail
 *   The mail of organizer, to remove him from the mails list.
 *   (don't send invitation to him)
 *
 * @return string
 *   Group's users mails.
 */
function event_invitation_members_mail_query($gid, $organizer_mail = '') {
  $query = db_select('users', 'u');
  $query->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'mail'));
  if ($organizer_mail) {
    $query->condition('u.mail', $organizer_mail, 'NOT IN');
  }
  return $query->execute()->fetchAllKeyed();
}

/**
 * Implements hook_mail().
 */
function event_invitation_mail($key, &$message, $params) {
  if ($key == 'invitation') {
    $message['headers'] = event_invitation_get_invitation_headers($params['from_name'], $params['from_address']);
    $message['body'][] = event_invitation_get_invitation_body($params);
    $message['subject'] = $params['subject'];
  }
}

/**
 * Set headers to send invitation.
 *
 * @return array
 *   Mail headers array.
 */
function event_invitation_get_invitation_headers($from_name, $from_address) {
  $mime_boundary = "----Meeting Booking----" . md5(time());

  $headers = array();
  $headers['From'] = $from_name . ' <' . $from_address . '>';
  $headers['Reply-To'] = $from_name . ' <' . $from_address . '>';
  $headers['MIME-Version'] = '1.0';
  $headers['Content-Type'] = 'multipart/alternative; boundary="' . $mime_boundary . '"';
  $headers['Content-class'] = 'urn:content-classes:calendarmessage';
  $headers['Return-Path'] = $from_address;

  return $headers;
}

define('EVENT_INVITATION_FROM_NAME_LENGTH', 35);

/**
 * Prepare invitation body.
 *
 * @return string
 *   ical text.
 */
function event_invitation_get_invitation_body($params) {
  $domain = variable_get('event_invitation_domain', '');

  // Create Email Headers.
  $mime_boundary = "----Meeting Booking----" . md5(time());

  // Create Email Body (HTML).
  $message = "--$mime_boundary\r\n";
  $message .= "Content-Type: text/html; charset=UTF-8\n";
  $message .= "Content-Transfer-Encoding: 8bit\n\n";
  $message .= "<html>\n";
  $message .= "<body>\n";
  $message .= '<p>' . $params['description'] . '</p>';
  $message .= "</body>\n";
  $message .= "</html>\n";
  $message .= "--$mime_boundary\r\n";

  // Cut long names to prevent broken of the message.
  if (strlen($params['from_name']) > EVENT_INVITATION_FROM_NAME_LENGTH) {
    $wrap = wordwrap($params['from_name'], EVENT_INVITATION_FROM_NAME_LENGTH);
    $params['from_name'] = substr($wrap, 0, strpos($wrap, "\n")) . '...';
  }

  $ical = 'BEGIN:VCALENDAR' . "\r\n" .
    'PRODID:-//Microsoft Corporation//Outlook 10.0 MIMEDIR//EN' . "\r\n" .
    'VERSION:2.0' . "\r\n" .
   'METHOD:' . $params['method'] . "\r\n" .
    'BEGIN:VTIMEZONE' . "\r\n" .
    'TZID:Israel Time' . "\r\n" .
    'BEGIN:STANDARD' . "\r\n" .
    'DTSTART:20091101T020000' . "\r\n" .
    'RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=1SU;BYMONTH=11' . "\r\n" .
    'TZOFFSETFROM:-0000' . "\r\n" .
    'TZOFFSETTO:-0500' . "\r\n" .
    'TZNAME:EST' . "\r\n" .
    'END:STANDARD' . "\r\n" .
    'BEGIN:DAYLIGHT' . "\r\n" .
    'DTSTART:20090301T020000' . "\r\n" .
    'RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=2SU;BYMONTH=3' . "\r\n" .
    'TZOFFSETFROM:-0500' . "\r\n" .
    'TZOFFSETTO:-0000' . "\r\n" .
    'TZNAME:EDST' . "\r\n" .
    'END:DAYLIGHT' . "\r\n" .
    'END:VTIMEZONE' . "\r\n" .
    'BEGIN:VEVENT' . "\r\n" .
    'ORGANIZER;CN="' . $params['from_name'] . '":MAILTO:' . $params['from_address'] . "\r\n" .
    'ATTENDEE;ROLE=REQ-PARTICIPANT;RSVP=TRUE:MAILTO:' .
    $params['to_address'] . "\r\n" .
    'LAST-MODIFIED:' . date("Ymd\TGis") . "\r\n" .
    'UID:' . $params['uid'] . "@" . $domain . "\r\n" .
    'DTSTAMP:' . date("Ymd\TGis") . "\r\n" .
    'DTSTART;TZID="Israel Time":' . date("Ymd\THis", strtotime($params['startTime'])) . "\r\n" .
    'DTEND;TZID="Israel Time":' . date("Ymd\THis", strtotime($params['endTime'])) . "\r\n" .
    'TRANSP:OPAQUE' . "\r\n" .
    'SEQUENCE:1' . "\r\n" .
    'SUMMARY:' . $params['subject'] . "\r\n" .
    'LOCATION:' . $params['location'] . "\r\n" .
    'CLASS:PUBLIC' . "\r\n" .
    'PRIORITY:5' . "\r\n" .
    'BEGIN:VALARM' . "\r\n" .
    'TRIGGER:-PT15M' . "\r\n" .
    'ACTION:DISPLAY' . "\r\n" .
    'DESCRIPTION:Reminder' . "\r\n" .
    'END:VALARM' . "\r\n" .
    'STATUS:' . $params['status'] . "\r\n" .
    'END:VEVENT' . "\r\n" .
    'END:VCALENDAR' . "\r\n";
  $message .= 'Content-Type: text/calendar;name="event.ics";method=' . $params['method'] . "\n";
  $message .= "Content-Transfer-Encoding: 8bit\n\n";
  $message .= $ical;
  return $message;
}
